---
# tasks file for luna 

- name: Generate root password for MongoDB and save it to /etc/trinity/passwords
  set_fact:
    tmp_pwd: "{{ lookup('password',
                          '/etc/trinity/passwords/mongo/luna.txt
                           chars=ascii_letters,digits,hexdigits') }}"

- name: Get root password for MongoDB from /etc/trinity/passwords
  set_fact:
    luna_db_pwd: "{{ lookup('password',
                          '/etc/trinity/passwords/mongo/luna.txt
                           chars=ascii_letters,digits,hexdigits') }}"

- name: Create a group for luna
  group:
    name: luna
    gid: '{{ luna_group_id }}'
    state: present

- name: Create a user for luna
  user:
    name: luna
    uid: '{{ luna_user_id }}'
    home: '{{ luna.cluster.path }}'
    group: luna
    shell: /sbin/nologin
    system: yes
    state: present

- name: Install pymongo3 dependency
  pip:
    name: pymongo
    executable: /usr/bin/pip3
    state: latest

- name: Install pymongo2 dependency
  pip:
    name: pymongo
    executable: /usr/bin/pip2
    state: latest

- name: Create a user for luna in MongoDB
  mongodb_user:
    login_database: "admin"
    login_user: "root"
    login_password: "{{ mongo_root_pwd }}"
    name: "luna"
    database: "luna"
    roles: [ "dbOwner" ]
    password: "{{ luna_db_pwd }}"
  when: primary | default(True)

- name: Install luna packages
  yum:
    name: '{{ luna_packages }}'
    state: present
  when: ansible_distribution == "CentOS"

- name: Install luna packages
  yum:
    name: '{{ luna_packages }}'
    state: present
    enablerepo: trix
  when: ansible_distribution == "Rocky"

- name: Install luna packages
  yum:
    name: '{{ luna_packages }}'
    state: present
    enablerepo: rhel-7-server-optional-rpms
  when: ansible_distribution == "RedHat"

- name: Copy tftp configuration to /etc/xinetd.d
  copy:
    src: 'tftp'
    dest: '/etc/xinetd.d/tftp'
  notify: restart xinetd

- name: Ensure /tftpboot exists
  file:
    path: '/tftpboot'
    state: directory

- name: Download iPXE EFI image to /tftpboot
  get_url:
    url: http://boot.ipxe.org/ipxe.efi
    dest: /tftpboot/luna_ipxe.efi
    mode: '0444'

- name: Download iPXE legacy image to /tftpboot
  get_url:
    url: http://boot.ipxe.org/undionly.kpxe
    dest: /tftpboot/luna_undionly.kpxe
    mode: '0444'

- name: Render /etc/luna.conf
  template:
    src: 'luna.conf.j2'
    dest: '/etc/luna.conf'
    owner: luna
    group: luna
    mode: 0400
  notify: restart luna

- name: Include luna's DNS zone file in named conf
  lineinfile:
    path: '/etc/named.conf'
    line: 'include "{{ luna.cluster.named_include_file }}";'
  notify: restart named

- name: Add luna's server configuration to nginx
  template:
    src: 'nginx-luna.conf.j2'
    dest: '/etc/nginx/conf.d/nginx-luna.conf'
  notify: reload nginx

- name: Enable luna services
  service:
    name: '{{ item }}'
    enabled: yes
  when: not ha
  with_items:
    - xinetd
    - dhcpd
    - lweb
    - ltorrent

- name: Explicitly disable xinetd
  service:
    name: xinetd
    enabled: no
  when: ha|default(False)

- name: Get /etc/dhcp status
  stat:
    path: '/etc/dhcp'
  register: default_dhcp_path

# Some PXE ROMs in some NICs do not send tftp replies using the FIP
# of the controllers. This workaround ensures that we SNAT those replies.
# TODO: delete workaround when no longer required.
- name: Get provisioning interface name
  shell: "ip -o addr show to {{ trix_cluster_net }}/{{ trix_cluster_netprefix }} | awk '{ print $2 }' | head -1"
  register: luna_prov_nic
  changed_when: False

- name: Workaround PXE boot issue when doing HA and masquerading is enabled
  template:
    src: 'firewalld_direct.xml.j2'
    dest: '/etc/firewalld/direct.xml'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: ha|default(False)
  notify: reload firewalld
###

- block:

  - name: Ensure {{ luna.dhcp.conf_path }} exists
    file:
      path: '{{ luna.dhcp.conf_path }}'
      state: directory

  - name: Copy default dhcp configuraion to {{ luna.dhcp.conf_path }}
    shell: rsync -raW -AX /etc/dhcp/* {{ luna.dhcp.conf_path }}
    args:
      creates: '{{ luna.dhcp.conf_path }}/dhclient.d'
    when: primary|default(True)

  - name: Delete default configuration
    file:
      path: '/etc/dhcp'
      state: absent

  - name: Replace default dhcp configuration path with symlink to {{ luna.dhcp.conf_path }}
    file:
      src: '{{ luna.dhcp.conf_path }}'
      dest: '/etc/dhcp'
      state: link
      force: yes

  when: luna.dhcp.conf_path|string not in '/etc/dhcp'
        and default_dhcp_path.stat.isdir

- block:

  - name: Ensure {{ luna.cluster.path }} exists
    file:
      path: '{{ luna.cluster.path }}'
      owner: luna
      group: luna
      mode: 0755
      state: directory

  - name: Selinux fcontext on files
    sefcontext:
      target: "{{ trix_local }}/etc/named.luna.zones"
      setype: named_zone_t

  - name: Check File exists or not
    stat:
      path: '{{ trix_local }}/etc/named.luna.zones'
    register: luna_dns_placeholder

  - name: Add a placeholder for luna's DNS zone file
    file:
      path: '{{ trix_local }}/etc/named.luna.zones'
      setype: named_zone_t
      group: named
      state: touch
    when: luna_dns_placeholder.stat.exists == false

#  - name: Initialize luna cluster
#    luna_cluster:
#      frontend_address: "{{ luna.cluster.frontend_address }}"
#      path: "{{ luna.cluster.path }}"
#      named_include_file: '{{ luna.cluster.named_include_file }}'
#      named_zone_dir: '{{ luna.cluster.named_zone_dir }}'
#      lweb_num_proc: '{{ luna.cluster.lweb_num_proc }}'
#      state: present

  - name: Initialize luna cluster
    ansible.builtin.shell:
      cmd: "/sbin/luna cluster init --frontend_address {{ luna.cluster.frontend_address }} --path {{ luna.cluster.path }} --user luna --nodeprefix node --nodedigits 3"
    register: initialize_output
    failed_when: false
    changed_when: '"is already created" not in initialize_output.stderr'

#  - name: Create luna networks
#    luna_network:
#      name: "{{ item.name }}"
#      network: "{{ item.ip }}"
#      prefix: "{{ item.prefix }}"
#      ns_ip: "{{ item.ns_ip  | default(None) }}"
#      state: present
#    with_items: "{{ luna.networks }}"

  - name: Create luna networks
    ansible.builtin.shell:
      cmd: "/sbin/luna network add --name {{ item.name }} --network {{ item.ip }} --prefix {{ item.prefix }} --ns_ip {{ item.ns_ip }}"
    with_items: "{{ luna.networks }}"
    register: networks_output
    failed_when: false
    changed_when: '"is already created" not in networks_output.stderr'

#  - name: Run luna cluster makedhcp
#    luna_cluster:
#      makedhcp: true
#      dhcp_net: "{{ luna.dhcp.network }}"
#      dhcp_range_start: "{{ luna.dhcp.start_ip }}"
#      dhcp_range_end: "{{ luna.dhcp.end_ip }}"

  - name: Run luna cluster makedhcp
    ansible.builtin.shell:
      cmd: "/sbin/luna cluster makedhcp --network {{ luna.dhcp.network }} --start_ip {{ luna.dhcp.start_ip }} --end_ip {{ luna.dhcp.end_ip }}"
    register: dhcp_output
    failed_when: false
    changed_when: '"is already created" not in dhcp_output.stderr'

  - name: Start luna services
    service:
      name: '{{ item }}'
      state: started
    with_items:
      - xinetd
      - dhcpd
      - lweb
      - ltorrent

  - name: Add dependency pacemaker resources
    pcs_resource:
      name: '{{ item }}'
      resource_class: 'systemd'
      resource_type: 'systemd:{{ item }}'
      options: 'op monitor interval=30 --group Trinity-stack'
      state: present
    when: ha | default(False)
    with_items:
      - xinetd
      - dhcpd
    tags: pcs

  - name: Add luna pacemaker resources
    pcs_resource:
      name: '{{ item }}'
      resource_class: 'systemd'
      resource_type: 'systemd:{{ item }}'
      options: 'op monitor interval=30 op start timeout=120 --group Trinity-stack'
      state: present
    when: ha | default(False)
    with_items:
      - lweb
      - ltorrent
    tags: pcs

  when: primary | default(True)
